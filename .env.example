# Server Configuration
PORT=3000

## OverviewNODE_ENV=development



This feature implements a WebSocket proxy for the AI Tutor chat functionality, allowing students to have real-time conversations with an AI tutor without making repeated HTTP requests. The implementation acts as a real-time transport layer between the student's client and the AI Service's REST API.# Logging

LOG_LEVEL=info

## Architecture

# Redis Configuration

```REDIS_HOST=localhost

Student Client (WebSocket)REDIS_PORT=6379

    ↓REDIS_PASSWORD=

    chat:sendMessage eventREDIS_DB=0

    ↓

Realtime Gateway (WebSocket Server)# Kafka Configuration

    ↓KAFKA_BROKERS=localhost:9092

    HTTP POST /api/ai/chatKAFKA_CONNECTION_TIMEOUT=30000

    ↓KAFKA_REQUEST_TIMEOUT=30000

AI Service (REST API)KAFKA_RETRY_ATTEMPTS=8

    ↓KAFKA_RETRY_DELAY=300

    Response

    ↓# JWT Configuration (legacy - kept for backwards compatibility)

Realtime GatewayJWT_SECRET=your-secret-key-here

    ↓JWT_EXPIRES_IN=1h

    chat:newMessage event

    ↓# Secret Key for Session Code Encryption (AES-256-CBC)

Student Client# This must match the SECRET_KEY in user-service

```SECRET_KEY=your-super-secret-key-change-this-in-production



## Features# Internal API Key for notifications

INTERNAL_API_KEY=your-internal-api-key-here

- ✅ Real-time bidirectional communication via WebSocket

- ✅ Authentication required for all chat interactions# Socket.IO CORS Configuration

- ✅ Automatic message forwarding to AI Service REST API# Comma-separated list of allowed origins (e.g., http://localhost:3000,https://yourdomain.com)

- ✅ Graceful error handling and timeout management# Use '*' to allow all origins (not recommended for production)

- ✅ Session management for conversation continuitySOCKET_CORS_ORIGIN=*

- ✅ Context preservation for personalized responses# Set to 'true' to allow credentials (cookies, authorization headers)

SOCKET_CORS_CREDENTIALS=true

## WebSocket Events# Comma-separated list of allowed methods

SOCKET_CORS_METHODS=GET,POST

### Client → Server# Comma-separated list of allowed headers

SOCKET_CORS_ALLOWED_HEADERS=Content-Type,Authorization

#### `chat:sendMessage`

# AI Service Configuration

Sends a message to the AI Tutor.# URL of the AI Service REST API

AI_SERVICE_URL=http://localhost:3001

**Payload:**# Timeout for AI Service requests in milliseconds (default: 30000)

```typescriptAI_SERVICE_TIMEOUT=30000

{
  message: string;          // Required: The message to send
  sessionId?: string;       // Optional: Session ID for conversation continuity
  context?: Record<string, any>;  // Optional: Additional context (e.g., topic, previous questions)
}
```

**Example:**
```javascript
socket.emit('chat:sendMessage', {
  message: 'Can you help me understand calculus?',
  sessionId: 'session-123',
  context: { topic: 'math', level: 'beginner' }
});
```

### Server → Client

#### `chat:newMessage`

Receives a response from the AI Tutor.

**Payload:**
```typescript
{
  message: string;          // The AI's response
  sessionId?: string;       // Session ID for the conversation
  metadata?: Record<string, any>;  // Optional metadata (e.g., confidence score)
  timestamp: string;        // ISO 8601 timestamp
}
```

**Example:**
```javascript
socket.on('chat:newMessage', (data) => {
  console.log('AI:', data.message);
  console.log('Session:', data.sessionId);
  console.log('Time:', data.timestamp);
});
```

#### `chat:error`

Receives error notifications.

**Payload:**
```typescript
{
  message: string;          // Human-readable error message
  code: string;            // Error code (AUTH_REQUIRED, INVALID_PAYLOAD, AI_SERVICE_ERROR, INTERNAL_ERROR)
  details?: string;        // Optional: Technical details
  timestamp: string;       // ISO 8601 timestamp
}
```

**Error Codes:**
- `AUTH_REQUIRED`: User is not authenticated
- `INVALID_PAYLOAD`: Invalid message format
- `AI_SERVICE_ERROR`: AI Service is unavailable or returned an error
- `INTERNAL_ERROR`: Unexpected server error

**Example:**
```javascript
socket.on('chat:error', (error) => {
  console.error('Error:', error.message);
  console.error('Code:', error.code);
});
```

## Environment Variables

Add the following variables to your `.env` file:

```bash
# AI Service Configuration
AI_SERVICE_URL=http://localhost:3001
AI_SERVICE_TIMEOUT=30000
```

## Authentication

All chat interactions require authentication. The WebSocket connection must include a valid session token:

```javascript
const socket = io('http://localhost:3000', {
  auth: {
    token: 'your-session-token'
  }
});
```

Unauthenticated requests will receive a `chat:error` event with code `AUTH_REQUIRED`.

## Usage Example

### Client-side (JavaScript)

```javascript
import io from 'socket.io-client';

// Connect with authentication
const socket = io('http://localhost:3000', {
  auth: {
    token: sessionToken
  }
});

// Handle connection
socket.on('connect', () => {
  console.log('Connected to AI Tutor');
  
  // Send a message
  socket.emit('chat:sendMessage', {
    message: 'Explain Newton\'s laws of motion',
    context: { subject: 'physics' }
  });
});

// Handle AI responses
socket.on('chat:newMessage', (data) => {
  console.log('AI Tutor:', data.message);
  // Update UI with the response
  displayMessage(data.message);
});

// Handle errors
socket.on('chat:error', (error) => {
  console.error('Error:', error.message);
  // Show error to user
  showError(error.message);
});
```

### React Example

```jsx
import { useEffect, useState } from 'react';
import io from 'socket.io-client';

function AiTutorChat({ sessionToken }) {
  const [socket, setSocket] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');

  useEffect(() => {
    const newSocket = io('http://localhost:3000', {
      auth: { token: sessionToken }
    });

    newSocket.on('chat:newMessage', (data) => {
      setMessages(prev => [...prev, {
        type: 'ai',
        content: data.message,
        timestamp: data.timestamp
      }]);
    });

    newSocket.on('chat:error', (error) => {
      alert(error.message);
    });

    setSocket(newSocket);
    return () => newSocket.close();
  }, [sessionToken]);

  const sendMessage = () => {
    if (!input.trim() || !socket) return;
    
    socket.emit('chat:sendMessage', { message: input });
    setMessages(prev => [...prev, {
      type: 'user',
      content: input,
      timestamp: new Date().toISOString()
    }]);
    setInput('');
  };

  return (
    <div>
      <div className="messages">
        {messages.map((msg, i) => (
          <div key={i} className={msg.type}>
            {msg.content}
          </div>
        ))}
      </div>
      <input
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
}
```

## Testing

### Unit Tests

Run the unit tests:
```bash
npm test src/ai-service/ai-service.client.spec.ts
npm test src/realtime/gateway/realtime.gateway.spec.ts
```

### Integration Tests

A test client is provided in `test/integration/test-ai-chat-client.js`:

```bash
# Set environment variables
export SOCKET_URL=http://localhost:3000
export AUTH_TOKEN=your-test-session-token

# Run the test client
node test/integration/test-ai-chat-client.js
```

## Error Handling

The implementation includes comprehensive error handling:

1. **Authentication Errors**: Unauthenticated users receive immediate feedback
2. **Validation Errors**: Invalid payloads are rejected with clear error messages
3. **Timeout Handling**: AI Service requests timeout after 30 seconds (configurable)
4. **Network Errors**: Connection failures are caught and reported
5. **AI Service Errors**: HTTP errors from the AI Service are gracefully handled

## Performance Considerations

- **Timeout**: Default 30-second timeout for AI Service requests
- **Concurrent Requests**: Multiple students can send messages simultaneously
- **Redis Adapter**: Supports horizontal scaling across multiple server instances
- **Connection Pooling**: HTTP connection reuse for AI Service requests

## Security

- ✅ Authentication required for all chat messages
- ✅ User ID automatically extracted from authenticated session
- ✅ Input validation for all payloads
- ✅ Error messages don't expose internal details to clients
- ✅ CORS configuration for WebSocket connections

## Future Enhancements

- [ ] Rate limiting for chat messages
- [ ] Message history persistence
- [ ] Typing indicators
- [ ] Multi-language support
- [ ] File/image sharing in chat
- [ ] Chat analytics and monitoring

## API Integration

### AI Service REST API Contract

The implementation expects the AI Service to expose:

**Endpoint:** `POST /api/ai/chat`

**Request:**
```json
{
  "message": "string",
  "userId": "string",
  "sessionId": "string?",
  "context": "object?"
}
```

**Response:**
```json
{
  "message": "string",
  "sessionId": "string?",
  "metadata": "object?"
}
```

## Troubleshooting

### Connection Issues

**Problem:** Client cannot connect to WebSocket server

**Solutions:**
- Check SOCKET_CORS_ORIGIN environment variable
- Verify AUTH_TOKEN is valid
- Check server is running on correct port

### AI Service Errors

**Problem:** Chat messages fail with AI_SERVICE_ERROR

**Solutions:**
- Verify AI_SERVICE_URL is correct
- Check AI Service is running and healthy
- Increase AI_SERVICE_TIMEOUT if needed
- Check network connectivity

### Authentication Failures

**Problem:** Receiving AUTH_REQUIRED errors

**Solutions:**
- Ensure session token is provided in auth object
- Verify token is valid and not expired
- Check SECRET_KEY matches across services

## Monitoring

Key metrics to monitor:

- WebSocket connection count
- Message throughput (messages/second)
- AI Service response time
- Error rates by error code
- Active chat sessions

## Related Documentation

- [User Guide](./USER_GUIDE.md)
- [Token Authentication Fix](./TOKEN_AUTHENTICATION_FIX.md)
- [Socket.IO Documentation](https://socket.io/docs/v4/)
